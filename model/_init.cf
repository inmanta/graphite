"""
    Copyright 2013 KU Leuven Research and Development - iMinds - Distrinet

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Administrative Contact: dnet-project-office@cs.kuleuven.be
    Technical Contact: bart.vanbrabant@cs.kuleuven.be
"""

entity GraphiteServer extends ip::services::Server:
    """
        Collect metrics and store them
    """
    bool webfrontend = true
end

implementation carbonServerRedhat:
    pkg_2 = std::Package(host = host, name = "python-carbon", state = "installed")
    svc = std::Service(host = host, name = "carbon-cache", state = "running", onboot = true)
    
    config = std::ConfigFile(host = host, path = "/etc/carbon/carbon.conf", 
        content = template("graphite/carbon.tmpl"), requires = pkg_2)
    schema_config = std::ConfigFile(host = host, path = "/etc/carbon/storage-schemas.conf", 
        content = template("graphite/carbon-schema.tmpl"), requires = pkg_2)
    
    svc.requires = [config, schema_config, pkg_2]
end

implementation carbonServerUbuntu:
    pkg = std::Package(host = host, name = "python-whisper", state = "installed")
end

implementation graphiteWeb:
    pkg_1 = std::Package(host = host, name = "graphite-web", state = "installed")
    web_py = std::ConfigFile(host = host, path = "/etc/graphite-web/local_settings.py",
        content = template("graphite/graphite-web.tmpl"))
#        requires = std::Package[host = host, name = "httpd"])
end

implement GraphiteServer using graphiteWeb when webfrontend == true
implement GraphiteServer using carbonServerRedhat when host.os is "redhat"
implement GraphiteServer using carbonServerUbuntu when host.os is "ubuntu"

port_range = ip::Port(low = 2003)
s_server = ip::DstService(proto = "tcp", dst_range = port_range)

typedef Server as GraphiteServer(services = graphite::s_server)

