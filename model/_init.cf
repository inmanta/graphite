"""
    Copyright 2015 Impera

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contect: bart@impera.io
"""

entity Carbon extends ip::services::Server:
    """
        Collect metrics and store them
    """
end

port_range = ip::Port(low=2003)
s_server = ip::DstService(proto="tcp", dst_range=port_range)

Carbon carbon_server [1] -- [0:1] Frontend graphite_frontend

entity Frontend extends web::Application:

end

implementation carbonServerRedhat for Carbon:
    self.services = graphite::s_server

    pkg_2 = std::Package(host=host, name="python-carbon", state="installed")
    svc = std::Service(host=host, name="carbon-cache", state="running", onboot=true)

    config = std::ConfigFile(host = host, path = "/etc/carbon/carbon.conf",
        content = std::template("graphite/carbon.tmpl"), requires = pkg_2)
    schema_config = std::ConfigFile(host = host, path = "/etc/carbon/storage-schemas.conf",
        content = std::template("graphite/carbon-schema.tmpl"), requires = pkg_2)
    aggregation_config = std::ConfigFile(host = host, path = "/etc/carbon/storage-aggregation.conf",
        content = std::template("graphite/carbon-aggregation.tmpl"), requires = pkg_2)
    svc.requires = [config, schema_config, aggregation_config, pkg_2]
end

implementation carbonServerUbuntu for Carbon:
    pkg = std::Package(host = host, name = "python-whisper", state = "installed")
end

implementation graphiteWeb for Frontend:
    # TODO: manage syncdb
    self.document_root = "/usr/share/graphite"

    vhost_cfg = std::ConfigFile(host=container.host, reload=true,
                                path="/etc/httpd/conf.d/{{ name.hostname }}.conf",
                                content=std::template("graphite/apache_vhost.tmpl"),
                                requires = std::Package[host=container.host, name="httpd"],
                                provides = std::Service[host=container.host, name="httpd"])

    pkg_1 = std::Package(host=container.host, name="graphite-web", state="installed")
    web_py = std::ConfigFile(host=container.host, path="/etc/graphite-web/local_settings.py",
                             content=std::template("graphite/graphite-web.tmpl"), requires = pkg_1)
                             
    migrate = exec::Run(host=container.host, command="/usr/bin/gmanage migrate",
              requires=web_py, provides=std::Service[host=container.host, name="httpd"])

    bin_file = std::File(host=container.host, path="/usr/bin/gmanage", mode=755, owner="root",
                         provides=migrate,
                         group="root", content=std::source("graphite/graphite-manage"))

    yum_repo = yum::Repository(host=container.host, name="grafana", metadata_expire=10,
                               baseurl="https://packagecloud.io/grafana/stable/el/6/$basearch")
    pkg_gr = std::Package(host=container.host, name="grafana", state="installed",requires=yum_repo)
    s_gr = std::Service(host=container.host, name="grafana-server", state="running", onboot=true, requires=pkg_gr)
end

implement Frontend using graphiteWeb
implement Carbon using carbonServerRedhat when std::familyof(host.os, "redhat")
implement Carbon using carbonServerUbuntu when std::familyof(host.os, "ubuntu")

